<?php

namespace App\Filament\Resources\StudentCaseResource\Pages;

use Filament\Notifications\Events\DatabaseNotificationsSent;
use App\Filament\Resources\StudentCaseResource;
use App\Models\Branch;
use App\Models\User;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;
use Filament\Notifications\Notification;
use Illuminate\Support\Facades\DB;
use Filament\Notifications\Actions\Action;
use Illuminate\Database\Eloquent\Model;

class CreateStudentCase extends CreateRecord
{
    protected static string $resource = StudentCaseResource::class;
    protected function mutateFormDataBeforeCreate(array $data): array
    {
        if (auth()->user()->hasRole('Super Admin') || auth()->user()->hasRole('Branch Manager')) {
            $branch = Branch::find($data['branch_id']);
        } else {
            $data['branch_id'] = auth()->user()->branches[0]['id'] ?? 0;
            $data['created_by'] = auth()->user()->id;
        }
        $data['status'] = "NEW";
        return $data;
    }

    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }

    // protected function afterCreate($data)
    // {
    //     dd($data);
    //     $recipient = auth()->user();

    //     $users = DB::table('branch_user')->whereNot('user_id', $recipient->id)
    //         ->where('branch_id', $recipient->branches[0]->id)
    //         ->get();

    //     foreach ($users as $user) {
    //         $branch = $recipient->branches[0]->name;
    //         $user = User::find($user->user_id);
    //         Notification::make()
    //             ->icon('heroicon-o-document-text')
    //             ->iconColor('success')
    //             ->title("Lead generated by $recipient->name")
    //             ->body("$branch branch has been generated new lead")
    //             ->actions([
    //                 Action::make('view')
    //                     ->button()
    //                     ->url(''),
    //             ])
    //             ->sendToDatabase($user);
    //         event(new DatabaseNotificationsSent($user));
    //     }
    //     return $data;
    // }
    protected function afterCreate()
    {
        $currentUser = auth()->user();
        $role = $currentUser->roles()->pluck('name')->first();

        $recipient = User::find($this->record['created_by']);
        $branch = $recipient->branches[0]->name;
        $id = $this->record['id'];
        Notification::make()
            ->icon('heroicon-o-document-text')
            ->iconColor('success')
            ->title("Lead generated by $currentUser->name  ($role)")
            ->body("$branch branch has been generated new lead")
            ->actions([
                Action::make('edit')
                    ->button()
                    ->url("/admin/student-cases/$id/edit"),
            ])
            ->sendToDatabase($recipient);
        event(new DatabaseNotificationsSent($recipient));
        $users = DB::table('branch_user')
            ->where('branch_id', $recipient->branches[0]->id)
            ->get();
        foreach ($users as $item) {
            $branch = $recipient->branches[0]->name;
            $user = User::whereHas('roles', function ($query) {
                $query->where('name', 'Branch Manager');
            })->find($item->user_id);
            $id = $this->record['id'];
            if ($user) {
                Notification::make()
                    ->icon('heroicon-o-document-text')
                    ->iconColor('success')
                    ->title("Lead generated by $currentUser->name  ($role)")
                    ->body("$branch branch has been generated new lead")
                    ->actions([
                        Action::make('edit')
                            ->button()
                            ->url("/admin/student-cases/$id/edit"),
                    ])
                    ->sendToDatabase($user);
                event(new DatabaseNotificationsSent($user));
            }
        }
    }
}